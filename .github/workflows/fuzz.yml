name: cargo-fuzz

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  FUZZ_TIME: 300
  FUZZ_JOBS: 2

jobs:
  build:
    name: fuzz
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-protoc
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: fuzz
          prefix-key: v1-rust
      - uses: dtolnay/install@cargo-fuzz

      - name: cargo build
        shell: bash
        run: |
          CARGO_TARGET_DIR=$(pwd)/target

          for target in protocol/admin protocol/memcache protocol/ping protocol/thrift storage/seg; do
            cd src/$target
            cargo fuzz build
            cd -
          done

  fuzz:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        target: [
          protocol/admin,
          protocol/memcache,
          protocol/ping,
          protocol/resp,
          protocol/thrift,
          storage/seg,
        ]
    name: fuzz-${{ matrix.os }}-${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [ build ]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-protoc
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: fuzz
          prefix-key: v1-rust
          save-if: false
      - uses: dtolnay/install@cargo-fuzz

      - name: fuzz ${{ matrix.target }}
        run: |
          CARGO_TARGET_DIR=$(pwd)/target

          cd src/${{ matrix.target }}
          for FUZZ_TARGET in `cargo fuzz list`; do
            cargo fuzz run ${FUZZ_TARGET} --jobs ${{ env.FUZZ_JOBS }} -- \
              -max_total_time=${{ env.FUZZ_TIME }};
          done

  check-success:
    name: verify all tests pass
    runs-on: ubuntu-latest
    needs:
      - build
      - fuzz

    steps:
      - name: no-op
        run: |
          echo "All checks passed!"
